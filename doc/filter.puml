@startuml component
actor enduser as "End user"
box "Envoy Proxy" #LightBlue
participant envoy as "Envoy Runtime"
participant envoyhost as "Envoy WebAssembly Host"
participant filter as "WebAssembly Filter Module"
end box
participant idprovider as "Authorization server"

== Un-Authenticated Request ==


enduser -> envoy: HTTP request\nto upstream application
envoy -> envoy: Creates filter chain\nfor request
activate envoy
envoy -> envoyhost
envoyhost-> filter: proxy_on_context_create(context_id, parent_context_id)
note left: Call the module to create new \nHttpContext to filter the request
activate filter
envoy -> envoyhost
envoyhost -> filter: proxy_on_http_request_headers(...)
filter -> envoyhost: proxy_get_buffer(...) -> call_result
note right: Fetch HTTP\nrequest headers
filter -> filter: Parse headers\nand check for active session
filter -> envoyhost: proxy_send_http_response(...) -> call_result
note right: No active session found.\nSend HTTP response without\nforwarding request upstream
deactivate filter
envoyhost -> envoy
envoy -> enduser: HTTP Redirect /auth
deactivate envoy
note right: Redirects End user\nto authorization server
enduser -> idprovider: GET /auth
enduser -> idprovider: authenticate
enduser -> idprovider: authorize filter module
idprovider -> enduser: Redirect /callback
note right: Redirect End user back\nto Envoy Proxy
enduser -> envoy: GET /callback
envoy -> envoy: Creates filter chain
activate envoy

envoy -> envoyhost
envoyhost -> filter: proxy_on_context_create(context_id, parent_context_id)
activate filter
envoy -> envoyhost
envoyhost -> filter: proxy_on_http_request_headers(...)
filter -> envoyhost: proxy_get_buffer(...) -> call_result
note right: Fetch HTTP\nrequest headers
filter -> filter: Validate params in\nthe authorization redirect
alt successful case
    filter -> envoyhost: proxy_dispatch_http_call(...) -> call_result
    note right: Dispatch token request to\nauthorization server
    envoyhost -> envoy
    envoy -> idprovider: HTTP POST /token
    return OpenID Provider Metadata
@enduml