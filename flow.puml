
@startuml component
actor enduser as "End user"
participant envoy as "Envoy (with WASM oicd filter)"
participant API1
participant idprovider as "ID-provider\n"
participant tokendings as "TokenDings\n"
participant API2
database cache as "Session Cache"


== Login enduser ==
group OpenID Connect Login with Envoy proxy
enduser -> envoy: Request Resource
envoy -> enduser: Redirect to ID-provider

enduser->idprovider: GET /oauth2/v2.0/authorize med query parametere
activate idprovider
enduser->idprovider: PÃ¥logging, \ngir samtykke/autorisasjon til applikasjonen
idprovider->enduser: Callback(POST) / redirect(GET) \nmed authorization_code
deactivate idprovider

enduser->envoy: Sender authorization code\ntil definert callback f.eks. /callback
activate envoy
envoy->idprovider: POST /oauth2/v2.0/token \nmed authorization_code, \nclient_id og client_secret/client_assertion
activate idprovider
idprovider->envoy: Returnerer id_token, \naccess_token og eventuelt \nrefresh_token
deactivate idprovider
envoy->envoy: Valider id_token\niht OpenID Connect
envoy->cache: Larger sessionen i cache
envoy->enduser: redirect med cookie(s) (id_token, session?)
deactivate envoy
end
== API1 to API2 ==
group Get token for API2 (OAuth 2.0 Token Exchange)
API1 -> envoy: Attempt to call API2
activate envoy
envoy -> cache: Check for cached token
group no cached token
cache -> envoy: Cache miss (no token for (API1, API2))
envoy -> tokendings: get token for API2 based on ID-provider token
tokendings -> tokendings: verify token\ncheck access policy:\n can API1 invoke API2?
tokendings -> envoy: issue new token for API2
note left: {\n sub: "enduser"\n aud: "API2"\n iss: "TokenDings"\n}
envoy -> cache: Cache token for later calls
end
group Call API2 with JWT Bearer token
envoy -> API2: call API2 with token from TokenDings
API2 -> API2: verify token\naccess control (based on enduser)
API2 -> envoy: return information
envoy -> API1: return information
deactivate envoy
API1 -> enduser: display information
end
@enduml